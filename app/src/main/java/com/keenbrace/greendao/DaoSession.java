package com.keenbrace.greendao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.keenbrace.greendao.User;
import com.keenbrace.greendao.CommonResult;
import com.keenbrace.greendao.SportsStructure;
import com.keenbrace.greendao.ShortPlan;
import com.keenbrace.greendao.LongPlan;
import com.keenbrace.greendao.HistoryRecord;

import com.keenbrace.greendao.UserDao;
import com.keenbrace.greendao.CommonResultDao;
import com.keenbrace.greendao.SportsStructureDao;
import com.keenbrace.greendao.ShortPlanDao;
import com.keenbrace.greendao.LongPlanDao;
import com.keenbrace.greendao.HistoryRecordDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig userDaoConfig;
    private final DaoConfig commonResultDaoConfig;
    private final DaoConfig sportsStructureDaoConfig;
    private final DaoConfig shortPlanDaoConfig;
    private final DaoConfig longPlanDaoConfig;
    private final DaoConfig historyRecordDaoConfig;

    private final UserDao userDao;
    private final CommonResultDao commonResultDao;
    private final SportsStructureDao sportsStructureDao;
    private final ShortPlanDao shortPlanDao;
    private final LongPlanDao longPlanDao;
    private final HistoryRecordDao historyRecordDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        commonResultDaoConfig = daoConfigMap.get(CommonResultDao.class).clone();
        commonResultDaoConfig.initIdentityScope(type);

        sportsStructureDaoConfig = daoConfigMap.get(SportsStructureDao.class).clone();
        sportsStructureDaoConfig.initIdentityScope(type);

        shortPlanDaoConfig = daoConfigMap.get(ShortPlanDao.class).clone();
        shortPlanDaoConfig.initIdentityScope(type);

        longPlanDaoConfig = daoConfigMap.get(LongPlanDao.class).clone();
        longPlanDaoConfig.initIdentityScope(type);

        historyRecordDaoConfig = daoConfigMap.get(HistoryRecordDao.class).clone();
        historyRecordDaoConfig.initIdentityScope(type);

        userDao = new UserDao(userDaoConfig, this);
        commonResultDao = new CommonResultDao(commonResultDaoConfig, this);
        sportsStructureDao = new SportsStructureDao(sportsStructureDaoConfig, this);
        shortPlanDao = new ShortPlanDao(shortPlanDaoConfig, this);
        longPlanDao = new LongPlanDao(longPlanDaoConfig, this);
        historyRecordDao = new HistoryRecordDao(historyRecordDaoConfig, this);

        registerDao(User.class, userDao);
        registerDao(CommonResult.class, commonResultDao);
        registerDao(SportsStructure.class, sportsStructureDao);
        registerDao(ShortPlan.class, shortPlanDao);
        registerDao(LongPlan.class, longPlanDao);
        registerDao(HistoryRecord.class, historyRecordDao);
    }
    
    public void clear() {
        userDaoConfig.getIdentityScope().clear();
        commonResultDaoConfig.getIdentityScope().clear();
        sportsStructureDaoConfig.getIdentityScope().clear();
        shortPlanDaoConfig.getIdentityScope().clear();
        longPlanDaoConfig.getIdentityScope().clear();
        historyRecordDaoConfig.getIdentityScope().clear();
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public CommonResultDao getCommonResultDao() {
        return commonResultDao;
    }

    public SportsStructureDao getSportsStructureDao() {
        return sportsStructureDao;
    }

    public ShortPlanDao getShortPlanDao() {
        return shortPlanDao;
    }

    public LongPlanDao getLongPlanDao() {
        return longPlanDao;
    }

    public HistoryRecordDao getHistoryRecordDao() {
        return historyRecordDao;
    }

}
