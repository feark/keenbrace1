package com.keenbrace.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.keenbrace.greendao.CommonResult;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMON_RESULT".
*/
public class CommonResultDao extends AbstractDao<CommonResult, Long> {

    public static final String TABLENAME = "COMMON_RESULT";

    /**
     * Properties of entity CommonResult.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, Integer.class, "type", false, "TYPE");
        public final static Property Set = new Property(2, Integer.class, "set", false, "SET");
        public final static Property Reps = new Property(3, byte[].class, "reps", false, "REPS");
        public final static Property Load = new Property(4, Integer.class, "load", false, "LOAD");
        public final static Property RM = new Property(5, Integer.class, "RM", false, "RM");
        public final static Property Duration = new Property(6, Long.class, "duration", false, "DURATION");
        public final static Property RestTime = new Property(7, Long.class, "restTime", false, "REST_TIME");
        public final static Property WasteTime = new Property(8, Long.class, "wasteTime", false, "WASTE_TIME");
        public final static Property NewRecord = new Property(9, byte[].class, "newRecord", false, "NEW_RECORD");
    };


    public CommonResultDao(DaoConfig config) {
        super(config);
    }
    
    public CommonResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMON_RESULT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" INTEGER," + // 1: type
                "\"SET\" INTEGER," + // 2: set
                "\"REPS\" BLOB," + // 3: reps
                "\"LOAD\" INTEGER," + // 4: load
                "\"RM\" INTEGER," + // 5: RM
                "\"DURATION\" INTEGER," + // 6: duration
                "\"REST_TIME\" INTEGER," + // 7: restTime
                "\"WASTE_TIME\" INTEGER," + // 8: wasteTime
                "\"NEW_RECORD\" BLOB);"); // 9: newRecord
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMON_RESULT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CommonResult entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
 
        Integer set = entity.getSet();
        if (set != null) {
            stmt.bindLong(3, set);
        }
 
        byte[] reps = entity.getReps();
        if (reps != null) {
            stmt.bindBlob(4, reps);
        }
 
        Integer load = entity.getLoad();
        if (load != null) {
            stmt.bindLong(5, load);
        }
 
        Integer RM = entity.getRM();
        if (RM != null) {
            stmt.bindLong(6, RM);
        }
 
        Long duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(7, duration);
        }
 
        Long restTime = entity.getRestTime();
        if (restTime != null) {
            stmt.bindLong(8, restTime);
        }
 
        Long wasteTime = entity.getWasteTime();
        if (wasteTime != null) {
            stmt.bindLong(9, wasteTime);
        }
 
        byte[] newRecord = entity.getNewRecord();
        if (newRecord != null) {
            stmt.bindBlob(10, newRecord);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CommonResult readEntity(Cursor cursor, int offset) {
        CommonResult entity = new CommonResult( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // set
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3), // reps
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // load
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // RM
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // duration
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // restTime
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // wasteTime
            cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9) // newRecord
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CommonResult entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSet(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setReps(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3));
        entity.setLoad(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setRM(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDuration(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setRestTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setWasteTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setNewRecord(cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CommonResult entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CommonResult entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
