package com.keenbrace.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.keenbrace.greendao.SportsStructure;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPORTS_STRUCTURE".
*/
public class SportsStructureDao extends AbstractDao<SportsStructure, Long> {

    public static final String TABLENAME = "SPORTS_STRUCTURE";

    /**
     * Properties of entity SportsStructure.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, Integer.class, "type", false, "TYPE");
        public final static Property Equipment = new Property(2, byte[].class, "equipment", false, "EQUIPMENT");
        public final static Property Target1 = new Property(3, String.class, "target1", false, "TARGET1");
        public final static Property Target2 = new Property(4, String.class, "target2", false, "TARGET2");
        public final static Property Target3 = new Property(5, String.class, "target3", false, "TARGET3");
        public final static Property Gif = new Property(6, String.class, "gif", false, "GIF");
        public final static Property Gif_len = new Property(7, Integer.class, "gif_len", false, "GIF_LEN");
        public final static Property CheckNum = new Property(8, Integer.class, "checkNum", false, "CHECK_NUM");
        public final static Property CheckX = new Property(9, byte[].class, "checkX", false, "CHECK_X");
        public final static Property CheckY = new Property(10, byte[].class, "checkY", false, "CHECK_Y");
        public final static Property CheckZ = new Property(11, byte[].class, "checkZ", false, "CHECK_Z");
        public final static Property BestTime = new Property(12, Long.class, "bestTime", false, "BEST_TIME");
    };


    public SportsStructureDao(DaoConfig config) {
        super(config);
    }
    
    public SportsStructureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPORTS_STRUCTURE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" INTEGER," + // 1: type
                "\"EQUIPMENT\" BLOB," + // 2: equipment
                "\"TARGET1\" TEXT," + // 3: target1
                "\"TARGET2\" TEXT," + // 4: target2
                "\"TARGET3\" TEXT," + // 5: target3
                "\"GIF\" TEXT," + // 6: gif
                "\"GIF_LEN\" INTEGER," + // 7: gif_len
                "\"CHECK_NUM\" INTEGER," + // 8: checkNum
                "\"CHECK_X\" BLOB," + // 9: checkX
                "\"CHECK_Y\" BLOB," + // 10: checkY
                "\"CHECK_Z\" BLOB," + // 11: checkZ
                "\"BEST_TIME\" INTEGER);"); // 12: bestTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPORTS_STRUCTURE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SportsStructure entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
 
        byte[] equipment = entity.getEquipment();
        if (equipment != null) {
            stmt.bindBlob(3, equipment);
        }
 
        String target1 = entity.getTarget1();
        if (target1 != null) {
            stmt.bindString(4, target1);
        }
 
        String target2 = entity.getTarget2();
        if (target2 != null) {
            stmt.bindString(5, target2);
        }
 
        String target3 = entity.getTarget3();
        if (target3 != null) {
            stmt.bindString(6, target3);
        }
 
        String gif = entity.getGif();
        if (gif != null) {
            stmt.bindString(7, gif);
        }
 
        Integer gif_len = entity.getGif_len();
        if (gif_len != null) {
            stmt.bindLong(8, gif_len);
        }
 
        Integer checkNum = entity.getCheckNum();
        if (checkNum != null) {
            stmt.bindLong(9, checkNum);
        }
 
        byte[] checkX = entity.getCheckX();
        if (checkX != null) {
            stmt.bindBlob(10, checkX);
        }
 
        byte[] checkY = entity.getCheckY();
        if (checkY != null) {
            stmt.bindBlob(11, checkY);
        }
 
        byte[] checkZ = entity.getCheckZ();
        if (checkZ != null) {
            stmt.bindBlob(12, checkZ);
        }
 
        Long bestTime = entity.getBestTime();
        if (bestTime != null) {
            stmt.bindLong(13, bestTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SportsStructure readEntity(Cursor cursor, int offset) {
        SportsStructure entity = new SportsStructure( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2), // equipment
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // target1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // target2
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // target3
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // gif
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // gif_len
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // checkNum
            cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9), // checkX
            cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10), // checkY
            cursor.isNull(offset + 11) ? null : cursor.getBlob(offset + 11), // checkZ
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12) // bestTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SportsStructure entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setEquipment(cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2));
        entity.setTarget1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTarget2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTarget3(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGif(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGif_len(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCheckNum(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setCheckX(cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9));
        entity.setCheckY(cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10));
        entity.setCheckZ(cursor.isNull(offset + 11) ? null : cursor.getBlob(offset + 11));
        entity.setBestTime(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SportsStructure entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SportsStructure entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
