package com.keenbrace.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.keenbrace.greendao.HistoryRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_RECORD".
*/
public class HistoryRecordDao extends AbstractDao<HistoryRecord, Long> {

    public static final String TABLENAME = "HISTORY_RECORD";

    /**
     * Properties of entity HistoryRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Triceps = new Property(1, Long.class, "triceps", false, "TRICEPS");
        public final static Property Biceps = new Property(2, Long.class, "biceps", false, "BICEPS");
        public final static Property Shoulder = new Property(3, Long.class, "shoulder", false, "SHOULDER");
        public final static Property Forearm = new Property(4, Long.class, "forearm", false, "FOREARM");
        public final static Property Chest = new Property(5, Long.class, "chest", false, "CHEST");
        public final static Property Back = new Property(6, Long.class, "back", false, "BACK");
        public final static Property Abs = new Property(7, Long.class, "abs", false, "ABS");
        public final static Property Glutes = new Property(8, Long.class, "glutes", false, "GLUTES");
        public final static Property Upperleg = new Property(9, Long.class, "upperleg", false, "UPPERLEG");
        public final static Property Lowerleg = new Property(10, Long.class, "lowerleg", false, "LOWERLEG");
        public final static Property Cardio = new Property(11, Long.class, "cardio", false, "CARDIO");
        public final static Property TricepsReps = new Property(12, Long.class, "tricepsReps", false, "TRICEPS_REPS");
        public final static Property BicepsReps = new Property(13, Long.class, "bicepsReps", false, "BICEPS_REPS");
        public final static Property ShoulderReps = new Property(14, Long.class, "shoulderReps", false, "SHOULDER_REPS");
        public final static Property ForearmReps = new Property(15, Long.class, "forearmReps", false, "FOREARM_REPS");
        public final static Property ChestReps = new Property(16, Long.class, "chestReps", false, "CHEST_REPS");
        public final static Property BackReps = new Property(17, Long.class, "backReps", false, "BACK_REPS");
        public final static Property AbsReps = new Property(18, Long.class, "absReps", false, "ABS_REPS");
        public final static Property GlutesReps = new Property(19, Long.class, "glutesReps", false, "GLUTES_REPS");
        public final static Property UpperlegReps = new Property(20, Long.class, "upperlegReps", false, "UPPERLEG_REPS");
        public final static Property LowerlegReps = new Property(21, Long.class, "lowerlegReps", false, "LOWERLEG_REPS");
        public final static Property TotalWorkout = new Property(22, Long.class, "totalWorkout", false, "TOTAL_WORKOUT");
        public final static Property TotalDistance = new Property(23, Long.class, "totalDistance", false, "TOTAL_DISTANCE");
        public final static Property AverSpeed = new Property(24, Integer.class, "averSpeed", false, "AVER_SPEED");
        public final static Property TotalCalorie = new Property(25, Long.class, "totalCalorie", false, "TOTAL_CALORIE");
        public final static Property TotalTime = new Property(26, Long.class, "totalTime", false, "TOTAL_TIME");
        public final static Property RM = new Property(27, Integer.class, "RM", false, "RM");
        public final static Property LongestDistance = new Property(28, Integer.class, "longestDistance", false, "LONGEST_DISTANCE");
        public final static Property LongestTime = new Property(29, Long.class, "longestTime", false, "LONGEST_TIME");
        public final static Property FastestSpeed = new Property(30, Integer.class, "fastestSpeed", false, "FASTEST_SPEED");
        public final static Property MostCalorie = new Property(31, Long.class, "mostCalorie", false, "MOST_CALORIE");
    };


    public HistoryRecordDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TRICEPS\" INTEGER," + // 1: triceps
                "\"BICEPS\" INTEGER," + // 2: biceps
                "\"SHOULDER\" INTEGER," + // 3: shoulder
                "\"FOREARM\" INTEGER," + // 4: forearm
                "\"CHEST\" INTEGER," + // 5: chest
                "\"BACK\" INTEGER," + // 6: back
                "\"ABS\" INTEGER," + // 7: abs
                "\"GLUTES\" INTEGER," + // 8: glutes
                "\"UPPERLEG\" INTEGER," + // 9: upperleg
                "\"LOWERLEG\" INTEGER," + // 10: lowerleg
                "\"CARDIO\" INTEGER," + // 11: cardio
                "\"TRICEPS_REPS\" INTEGER," + // 12: tricepsReps
                "\"BICEPS_REPS\" INTEGER," + // 13: bicepsReps
                "\"SHOULDER_REPS\" INTEGER," + // 14: shoulderReps
                "\"FOREARM_REPS\" INTEGER," + // 15: forearmReps
                "\"CHEST_REPS\" INTEGER," + // 16: chestReps
                "\"BACK_REPS\" INTEGER," + // 17: backReps
                "\"ABS_REPS\" INTEGER," + // 18: absReps
                "\"GLUTES_REPS\" INTEGER," + // 19: glutesReps
                "\"UPPERLEG_REPS\" INTEGER," + // 20: upperlegReps
                "\"LOWERLEG_REPS\" INTEGER," + // 21: lowerlegReps
                "\"TOTAL_WORKOUT\" INTEGER," + // 22: totalWorkout
                "\"TOTAL_DISTANCE\" INTEGER," + // 23: totalDistance
                "\"AVER_SPEED\" INTEGER," + // 24: averSpeed
                "\"TOTAL_CALORIE\" INTEGER," + // 25: totalCalorie
                "\"TOTAL_TIME\" INTEGER," + // 26: totalTime
                "\"RM\" INTEGER," + // 27: RM
                "\"LONGEST_DISTANCE\" INTEGER," + // 28: longestDistance
                "\"LONGEST_TIME\" INTEGER," + // 29: longestTime
                "\"FASTEST_SPEED\" INTEGER," + // 30: fastestSpeed
                "\"MOST_CALORIE\" INTEGER);"); // 31: mostCalorie
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HistoryRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long triceps = entity.getTriceps();
        if (triceps != null) {
            stmt.bindLong(2, triceps);
        }
 
        Long biceps = entity.getBiceps();
        if (biceps != null) {
            stmt.bindLong(3, biceps);
        }
 
        Long shoulder = entity.getShoulder();
        if (shoulder != null) {
            stmt.bindLong(4, shoulder);
        }
 
        Long forearm = entity.getForearm();
        if (forearm != null) {
            stmt.bindLong(5, forearm);
        }
 
        Long chest = entity.getChest();
        if (chest != null) {
            stmt.bindLong(6, chest);
        }
 
        Long back = entity.getBack();
        if (back != null) {
            stmt.bindLong(7, back);
        }
 
        Long abs = entity.getAbs();
        if (abs != null) {
            stmt.bindLong(8, abs);
        }
 
        Long glutes = entity.getGlutes();
        if (glutes != null) {
            stmt.bindLong(9, glutes);
        }
 
        Long upperleg = entity.getUpperleg();
        if (upperleg != null) {
            stmt.bindLong(10, upperleg);
        }
 
        Long lowerleg = entity.getLowerleg();
        if (lowerleg != null) {
            stmt.bindLong(11, lowerleg);
        }
 
        Long cardio = entity.getCardio();
        if (cardio != null) {
            stmt.bindLong(12, cardio);
        }
 
        Long tricepsReps = entity.getTricepsReps();
        if (tricepsReps != null) {
            stmt.bindLong(13, tricepsReps);
        }
 
        Long bicepsReps = entity.getBicepsReps();
        if (bicepsReps != null) {
            stmt.bindLong(14, bicepsReps);
        }
 
        Long shoulderReps = entity.getShoulderReps();
        if (shoulderReps != null) {
            stmt.bindLong(15, shoulderReps);
        }
 
        Long forearmReps = entity.getForearmReps();
        if (forearmReps != null) {
            stmt.bindLong(16, forearmReps);
        }
 
        Long chestReps = entity.getChestReps();
        if (chestReps != null) {
            stmt.bindLong(17, chestReps);
        }
 
        Long backReps = entity.getBackReps();
        if (backReps != null) {
            stmt.bindLong(18, backReps);
        }
 
        Long absReps = entity.getAbsReps();
        if (absReps != null) {
            stmt.bindLong(19, absReps);
        }
 
        Long glutesReps = entity.getGlutesReps();
        if (glutesReps != null) {
            stmt.bindLong(20, glutesReps);
        }
 
        Long upperlegReps = entity.getUpperlegReps();
        if (upperlegReps != null) {
            stmt.bindLong(21, upperlegReps);
        }
 
        Long lowerlegReps = entity.getLowerlegReps();
        if (lowerlegReps != null) {
            stmt.bindLong(22, lowerlegReps);
        }
 
        Long totalWorkout = entity.getTotalWorkout();
        if (totalWorkout != null) {
            stmt.bindLong(23, totalWorkout);
        }
 
        Long totalDistance = entity.getTotalDistance();
        if (totalDistance != null) {
            stmt.bindLong(24, totalDistance);
        }
 
        Integer averSpeed = entity.getAverSpeed();
        if (averSpeed != null) {
            stmt.bindLong(25, averSpeed);
        }
 
        Long totalCalorie = entity.getTotalCalorie();
        if (totalCalorie != null) {
            stmt.bindLong(26, totalCalorie);
        }
 
        Long totalTime = entity.getTotalTime();
        if (totalTime != null) {
            stmt.bindLong(27, totalTime);
        }
 
        Integer RM = entity.getRM();
        if (RM != null) {
            stmt.bindLong(28, RM);
        }
 
        Integer longestDistance = entity.getLongestDistance();
        if (longestDistance != null) {
            stmt.bindLong(29, longestDistance);
        }
 
        Long longestTime = entity.getLongestTime();
        if (longestTime != null) {
            stmt.bindLong(30, longestTime);
        }
 
        Integer fastestSpeed = entity.getFastestSpeed();
        if (fastestSpeed != null) {
            stmt.bindLong(31, fastestSpeed);
        }
 
        Long mostCalorie = entity.getMostCalorie();
        if (mostCalorie != null) {
            stmt.bindLong(32, mostCalorie);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HistoryRecord readEntity(Cursor cursor, int offset) {
        HistoryRecord entity = new HistoryRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // triceps
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // biceps
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // shoulder
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // forearm
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // chest
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // back
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // abs
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // glutes
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // upperleg
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // lowerleg
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // cardio
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // tricepsReps
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // bicepsReps
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // shoulderReps
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // forearmReps
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // chestReps
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // backReps
            cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18), // absReps
            cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19), // glutesReps
            cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20), // upperlegReps
            cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21), // lowerlegReps
            cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22), // totalWorkout
            cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23), // totalDistance
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // averSpeed
            cursor.isNull(offset + 25) ? null : cursor.getLong(offset + 25), // totalCalorie
            cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26), // totalTime
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // RM
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // longestDistance
            cursor.isNull(offset + 29) ? null : cursor.getLong(offset + 29), // longestTime
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // fastestSpeed
            cursor.isNull(offset + 31) ? null : cursor.getLong(offset + 31) // mostCalorie
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HistoryRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTriceps(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBiceps(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setShoulder(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setForearm(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setChest(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setBack(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setAbs(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setGlutes(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setUpperleg(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setLowerleg(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setCardio(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setTricepsReps(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setBicepsReps(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setShoulderReps(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setForearmReps(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setChestReps(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setBackReps(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setAbsReps(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
        entity.setGlutesReps(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
        entity.setUpperlegReps(cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20));
        entity.setLowerlegReps(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
        entity.setTotalWorkout(cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22));
        entity.setTotalDistance(cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23));
        entity.setAverSpeed(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setTotalCalorie(cursor.isNull(offset + 25) ? null : cursor.getLong(offset + 25));
        entity.setTotalTime(cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26));
        entity.setRM(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setLongestDistance(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setLongestTime(cursor.isNull(offset + 29) ? null : cursor.getLong(offset + 29));
        entity.setFastestSpeed(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setMostCalorie(cursor.isNull(offset + 31) ? null : cursor.getLong(offset + 31));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HistoryRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HistoryRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
