package com.keenbrace.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.keenbrace.greendao.Challenge;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHALLENGE".
*/
public class ChallengeDao extends AbstractDao<Challenge, Long> {

    public static final String TABLENAME = "CHALLENGE";

    /**
     * Properties of entity Challenge.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ChallengeID = new Property(1, Integer.class, "challengeID", false, "CHALLENGE_ID");
        public final static Property ChallengeLogo = new Property(2, Integer.class, "challengeLogo", false, "CHALLENGE_LOGO");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Rules = new Property(4, String.class, "rules", false, "RULES");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property Rounds = new Property(6, Integer.class, "rounds", false, "ROUNDS");
        public final static Property Reps = new Property(7, Integer.class, "reps", false, "REPS");
        public final static Property WorkoutsNumber = new Property(8, Integer.class, "workoutsNumber", false, "WORKOUTS_NUMBER");
        public final static Property Workouts = new Property(9, byte[].class, "workouts", false, "WORKOUTS");
        public final static Property Distance = new Property(10, Integer.class, "distance", false, "DISTANCE");
        public final static Property Section = new Property(11, Integer.class, "section", false, "SECTION");
        public final static Property Content = new Property(12, byte[].class, "content", false, "CONTENT");
        public final static Property Duration = new Property(13, byte[].class, "duration", false, "DURATION");
        public final static Property Cadence = new Property(14, Integer.class, "cadence", false, "CADENCE");
        public final static Property Speed = new Property(15, Integer.class, "speed", false, "SPEED");
        public final static Property TotalTime = new Property(16, Integer.class, "totalTime", false, "TOTAL_TIME");
    };


    public ChallengeDao(DaoConfig config) {
        super(config);
    }
    
    public ChallengeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHALLENGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CHALLENGE_ID\" INTEGER," + // 1: challengeID
                "\"CHALLENGE_LOGO\" INTEGER," + // 2: challengeLogo
                "\"TITLE\" TEXT," + // 3: title
                "\"RULES\" TEXT," + // 4: rules
                "\"DESCRIPTION\" TEXT," + // 5: description
                "\"ROUNDS\" INTEGER," + // 6: rounds
                "\"REPS\" INTEGER," + // 7: reps
                "\"WORKOUTS_NUMBER\" INTEGER," + // 8: workoutsNumber
                "\"WORKOUTS\" BLOB," + // 9: workouts
                "\"DISTANCE\" INTEGER," + // 10: distance
                "\"SECTION\" INTEGER," + // 11: section
                "\"CONTENT\" BLOB," + // 12: content
                "\"DURATION\" BLOB," + // 13: duration
                "\"CADENCE\" INTEGER," + // 14: cadence
                "\"SPEED\" INTEGER," + // 15: speed
                "\"TOTAL_TIME\" INTEGER);"); // 16: totalTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHALLENGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Challenge entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer challengeID = entity.getChallengeID();
        if (challengeID != null) {
            stmt.bindLong(2, challengeID);
        }
 
        Integer challengeLogo = entity.getChallengeLogo();
        if (challengeLogo != null) {
            stmt.bindLong(3, challengeLogo);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String rules = entity.getRules();
        if (rules != null) {
            stmt.bindString(5, rules);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        Integer rounds = entity.getRounds();
        if (rounds != null) {
            stmt.bindLong(7, rounds);
        }
 
        Integer reps = entity.getReps();
        if (reps != null) {
            stmt.bindLong(8, reps);
        }
 
        Integer workoutsNumber = entity.getWorkoutsNumber();
        if (workoutsNumber != null) {
            stmt.bindLong(9, workoutsNumber);
        }
 
        byte[] workouts = entity.getWorkouts();
        if (workouts != null) {
            stmt.bindBlob(10, workouts);
        }
 
        Integer distance = entity.getDistance();
        if (distance != null) {
            stmt.bindLong(11, distance);
        }
 
        Integer section = entity.getSection();
        if (section != null) {
            stmt.bindLong(12, section);
        }
 
        byte[] content = entity.getContent();
        if (content != null) {
            stmt.bindBlob(13, content);
        }
 
        byte[] duration = entity.getDuration();
        if (duration != null) {
            stmt.bindBlob(14, duration);
        }
 
        Integer cadence = entity.getCadence();
        if (cadence != null) {
            stmt.bindLong(15, cadence);
        }
 
        Integer speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindLong(16, speed);
        }
 
        Integer totalTime = entity.getTotalTime();
        if (totalTime != null) {
            stmt.bindLong(17, totalTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Challenge readEntity(Cursor cursor, int offset) {
        Challenge entity = new Challenge( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // challengeID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // challengeLogo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rules
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // rounds
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // reps
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // workoutsNumber
            cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9), // workouts
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // distance
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // section
            cursor.isNull(offset + 12) ? null : cursor.getBlob(offset + 12), // content
            cursor.isNull(offset + 13) ? null : cursor.getBlob(offset + 13), // duration
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // cadence
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // speed
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16) // totalTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Challenge entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChallengeID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setChallengeLogo(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRules(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRounds(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setReps(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setWorkoutsNumber(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setWorkouts(cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9));
        entity.setDistance(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setSection(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setContent(cursor.isNull(offset + 12) ? null : cursor.getBlob(offset + 12));
        entity.setDuration(cursor.isNull(offset + 13) ? null : cursor.getBlob(offset + 13));
        entity.setCadence(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setSpeed(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setTotalTime(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Challenge entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Challenge entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
