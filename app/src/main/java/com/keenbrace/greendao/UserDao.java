package com.keenbrace.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.keenbrace.greendao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property UserID = new Property(1, String.class, "userID", false, "USER_ID");
        public final static Property Nickname = new Property(2, String.class, "Nickname", false, "NICKNAME");
        public final static Property Sex = new Property(3, Integer.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(4, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Email = new Property(5, String.class, "email", false, "EMAIL");
        public final static Property Mobile = new Property(6, String.class, "mobile", false, "MOBILE");
        public final static Property PicturePath = new Property(7, String.class, "picturePath", false, "PICTURE_PATH");
        public final static Property Height = new Property(8, Integer.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(9, Integer.class, "weight", false, "WEIGHT");
        public final static Property LoginName = new Property(10, String.class, "loginName", false, "LOGIN_NAME");
        public final static Property Password = new Property(11, String.class, "password", false, "PASSWORD");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userID
                "\"NICKNAME\" TEXT," + // 2: Nickname
                "\"SEX\" INTEGER," + // 3: sex
                "\"BIRTHDAY\" TEXT," + // 4: birthday
                "\"EMAIL\" TEXT," + // 5: email
                "\"MOBILE\" TEXT," + // 6: mobile
                "\"PICTURE_PATH\" TEXT," + // 7: picturePath
                "\"HEIGHT\" INTEGER," + // 8: height
                "\"WEIGHT\" INTEGER," + // 9: weight
                "\"LOGIN_NAME\" TEXT UNIQUE ," + // 10: loginName
                "\"PASSWORD\" TEXT);"); // 11: password
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(2, userID);
        }
 
        String Nickname = entity.getNickname();
        if (Nickname != null) {
            stmt.bindString(3, Nickname);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(4, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(7, mobile);
        }
 
        String picturePath = entity.getPicturePath();
        if (picturePath != null) {
            stmt.bindString(8, picturePath);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(9, height);
        }
 
        Integer weight = entity.getWeight();
        if (weight != null) {
            stmt.bindLong(10, weight);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(11, loginName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(12, password);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Nickname
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birthday
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // email
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mobile
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // picturePath
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // height
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // weight
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // loginName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // password
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMobile(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPicturePath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHeight(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setWeight(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setLoginName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPassword(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
