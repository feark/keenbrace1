package com.keenbrace.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.keenbrace.greendao.KeenBrace;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KEEN_BRACE".
*/
public class KeenBraceDao extends AbstractDao<KeenBrace, Long> {

    public static final String TABLENAME = "KEEN_BRACE";

    /**
     * Properties of entity KeenBrace.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserID = new Property(1, Long.class, "userID", false, "USER_ID");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property StartTime = new Property(3, Long.class, "startTime", false, "START_TIME");
        public final static Property Timelength = new Property(4, Long.class, "timelength", false, "TIMELENGTH");
        public final static Property Sumscore = new Property(5, Integer.class, "sumscore", false, "SUMSCORE");
        public final static Property Cadence = new Property(6, Integer.class, "cadence", false, "CADENCE");
        public final static Property Stride = new Property(7, Integer.class, "stride", false, "STRIDE");
        public final static Property Mileage = new Property(8, Integer.class, "mileage", false, "MILEAGE");
        public final static Property FileName = new Property(9, String.class, "fileName", false, "FILE_NAME");
        public final static Property EndTime = new Property(10, Long.class, "endTime", false, "END_TIME");
        public final static Property LatLngs = new Property(11, String.class, "latLngs", false, "LAT_LNGS");
        public final static Property Sumwarings = new Property(12, Integer.class, "sumwarings", false, "SUMWARINGS");
        public final static Property Latitude = new Property(13, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(14, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Endlatitude = new Property(15, Double.class, "endlatitude", false, "ENDLATITUDE");
        public final static Property Endlongitude = new Property(16, Double.class, "endlongitude", false, "ENDLONGITUDE");
        public final static Property State = new Property(17, Integer.class, "state", false, "STATE");
    };


    public KeenBraceDao(DaoConfig config) {
        super(config);
    }
    
    public KeenBraceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KEEN_BRACE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userID
                "\"TYPE\" INTEGER," + // 2: type
                "\"START_TIME\" INTEGER," + // 3: startTime
                "\"TIMELENGTH\" INTEGER," + // 4: timelength
                "\"SUMSCORE\" INTEGER," + // 5: sumscore
                "\"CADENCE\" INTEGER," + // 6: cadence
                "\"STRIDE\" INTEGER," + // 7: stride
                "\"MILEAGE\" INTEGER," + // 8: mileage
                "\"FILE_NAME\" TEXT," + // 9: fileName
                "\"END_TIME\" INTEGER," + // 10: endTime
                "\"LAT_LNGS\" TEXT," + // 11: latLngs
                "\"SUMWARINGS\" INTEGER," + // 12: sumwarings
                "\"LATITUDE\" REAL," + // 13: latitude
                "\"LONGITUDE\" REAL," + // 14: longitude
                "\"ENDLATITUDE\" REAL," + // 15: endlatitude
                "\"ENDLONGITUDE\" REAL," + // 16: endlongitude
                "\"STATE\" INTEGER);"); // 17: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KEEN_BRACE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, KeenBrace entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userID = entity.getUserID();
        if (userID != null) {
            stmt.bindLong(2, userID);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(4, startTime);
        }
 
        Long timelength = entity.getTimelength();
        if (timelength != null) {
            stmt.bindLong(5, timelength);
        }
 
        Integer sumscore = entity.getSumscore();
        if (sumscore != null) {
            stmt.bindLong(6, sumscore);
        }
 
        Integer cadence = entity.getCadence();
        if (cadence != null) {
            stmt.bindLong(7, cadence);
        }
 
        Integer stride = entity.getStride();
        if (stride != null) {
            stmt.bindLong(8, stride);
        }
 
        Integer mileage = entity.getMileage();
        if (mileage != null) {
            stmt.bindLong(9, mileage);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(10, fileName);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(11, endTime);
        }
 
        String latLngs = entity.getLatLngs();
        if (latLngs != null) {
            stmt.bindString(12, latLngs);
        }
 
        Integer sumwarings = entity.getSumwarings();
        if (sumwarings != null) {
            stmt.bindLong(13, sumwarings);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(14, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(15, longitude);
        }
 
        Double endlatitude = entity.getEndlatitude();
        if (endlatitude != null) {
            stmt.bindDouble(16, endlatitude);
        }
 
        Double endlongitude = entity.getEndlongitude();
        if (endlongitude != null) {
            stmt.bindDouble(17, endlongitude);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(18, state);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public KeenBrace readEntity(Cursor cursor, int offset) {
        KeenBrace entity = new KeenBrace( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // startTime
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // timelength
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // sumscore
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // cadence
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // stride
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // mileage
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fileName
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // endTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // latLngs
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // sumwarings
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // latitude
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // longitude
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // endlatitude
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // endlongitude
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17) // state
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, KeenBrace entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setStartTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setTimelength(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setSumscore(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCadence(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setStride(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setMileage(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setFileName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEndTime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setLatLngs(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSumwarings(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setLatitude(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setLongitude(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setEndlatitude(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setEndlongitude(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setState(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(KeenBrace entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(KeenBrace entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
