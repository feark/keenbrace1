package com.keenbrace.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.keenbrace.greendao.LongPlan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LONG_PLAN".
*/
public class LongPlanDao extends AbstractDao<LongPlan, Long> {

    public static final String TABLENAME = "LONG_PLAN";

    /**
     * Properties of entity LongPlan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Weekdays = new Property(1, Integer.class, "weekdays", false, "WEEKDAYS");
        public final static Property Start_date = new Property(2, java.util.Date.class, "start_date", false, "START_DATE");
        public final static Property End_date = new Property(3, java.util.Date.class, "end_date", false, "END_DATE");
        public final static Property Types = new Property(4, byte[].class, "types", false, "TYPES");
        public final static Property Times = new Property(5, Integer.class, "times", false, "TIMES");
        public final static Property Interval = new Property(6, byte[].class, "interval", false, "INTERVAL");
        public final static Property FinishStatus = new Property(7, byte[].class, "finishStatus", false, "FINISH_STATUS");
        public final static Property TrainIDset = new Property(8, byte[].class, "trainIDset", false, "TRAIN_IDSET");
    };


    public LongPlanDao(DaoConfig config) {
        super(config);
    }
    
    public LongPlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LONG_PLAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"WEEKDAYS\" INTEGER," + // 1: weekdays
                "\"START_DATE\" INTEGER," + // 2: start_date
                "\"END_DATE\" INTEGER," + // 3: end_date
                "\"TYPES\" BLOB," + // 4: types
                "\"TIMES\" INTEGER," + // 5: times
                "\"INTERVAL\" BLOB," + // 6: interval
                "\"FINISH_STATUS\" BLOB," + // 7: finishStatus
                "\"TRAIN_IDSET\" BLOB);"); // 8: trainIDset
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LONG_PLAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LongPlan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer weekdays = entity.getWeekdays();
        if (weekdays != null) {
            stmt.bindLong(2, weekdays);
        }
 
        java.util.Date start_date = entity.getStart_date();
        if (start_date != null) {
            stmt.bindLong(3, start_date.getTime());
        }
 
        java.util.Date end_date = entity.getEnd_date();
        if (end_date != null) {
            stmt.bindLong(4, end_date.getTime());
        }
 
        byte[] types = entity.getTypes();
        if (types != null) {
            stmt.bindBlob(5, types);
        }
 
        Integer times = entity.getTimes();
        if (times != null) {
            stmt.bindLong(6, times);
        }
 
        byte[] interval = entity.getInterval();
        if (interval != null) {
            stmt.bindBlob(7, interval);
        }
 
        byte[] finishStatus = entity.getFinishStatus();
        if (finishStatus != null) {
            stmt.bindBlob(8, finishStatus);
        }
 
        byte[] trainIDset = entity.getTrainIDset();
        if (trainIDset != null) {
            stmt.bindBlob(9, trainIDset);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LongPlan readEntity(Cursor cursor, int offset) {
        LongPlan entity = new LongPlan( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // weekdays
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // start_date
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // end_date
            cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4), // types
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // times
            cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6), // interval
            cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7), // finishStatus
            cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8) // trainIDset
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LongPlan entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWeekdays(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setStart_date(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setEnd_date(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setTypes(cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4));
        entity.setTimes(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setInterval(cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6));
        entity.setFinishStatus(cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7));
        entity.setTrainIDset(cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LongPlan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LongPlan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
